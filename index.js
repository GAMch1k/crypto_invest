const TelegramBot = require('node-telegram-bot-api');
const sqlite3 = require('sqlite3').verbose();
const db = new sqlite3.Database('./databases/database.db');


db.serialize(() => {
    db.run("CREATE TABLE IF NOT EXISTS users (user_id INTEGER, balance REAL, admin INTEGER, position TEXT, banned INTEGER)");
});


const token = '5173499293:AAEjTu3z7N-6rhpJxHhhDPV_gR85hlTc-LA';
const bot = new TelegramBot(token, {polling: true});



const freedom_link = 'https://freedom24.com/authentication/signup/?__lang__=ru&ref=mc_gc_general_f24_ru_17066694396&utm_campaign=mc_gc_general_f24_ru_17066694396_135610020469&utm_source=google&utm_medium=search&utm_term=m_freedom24&utm_content=135610020469_598492474497&gclid=Cj0KCQiA5NSdBhDfARIsALzs2EBmHEj9xFozw0IAkP9kwgxZ6PO3CnegYB38NqtmQK2paa5Lk-ktbMUaAqLiEALw_wcB';


const admin_id = 532666364;
let orders = {};

function new_user(chatId) {
    db.serialize(() => {
        db.get('SELECT * FROM users WHERE user_id = ?', [chatId], (err, result) => {
            if (err) {
                console.log(err);
            } else {
                console.log(result);
                if (result == undefined) {
                    const stmt = db.prepare("INSERT INTO users VALUES (?, ?, ?, ?, ?)");
                    stmt.run(chatId, 0, 0, "main_menu", 0);
                    stmt.finalize();
                    console.log('NEW USER CREATED');
                } else {
                    set_stage(chatId, "main_menu");
                }
            }
        });
    });
}


function get_user(chatId) {
    return new Promise(
        (resolve, reject) => {
            db.serialize(() => {
                db.get('SELECT * FROM users WHERE user_id = ?', [chatId], (err, rows) => {
                    if (err) {reject(err);}
                    resolve(rows);
                });
            });
        }
    );
}




function set_stage(chatId, stage_name) {
    db.serialize(() => {
        const stmt = db.prepare("UPDATE users SET position = ? WHERE user_id = ?");
        stmt.run(stage_name, chatId);
        stmt.finalize();
        console.log('UPDATED POSITION');
    });
}



let main_menu_keyboard = {
    reply_markup: {
        resize_keyboard: true,
        one_time_keyboard: false, // TRUE
        keyboard: [
            ["–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ë–∞–ª–∞–Ω—Å", "–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞"],
            ["üìù –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∏ –£—Å–ª–æ–≤–∏—è üìù"],
            ["üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ( –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ) üÜò"],
            ["üìà FREEDOM 24 üìâ"],
            ["ü•á –ú–û–ô –ü–†–û–§–ò–õ–¨ ü•á"]
        ]
    }
}


cancel_keyboard = {
    reply_markup: {
        resize_keyboard: true,
        one_time_keyboard: true,
        keyboard: [
            ["–û—Ç–º–µ–Ω–∞"]
        ]
    }
}

fill_up_keyboard = {
    reply_markup: {
        resize_keyboard: true,
        one_time_keyboard: true,
        keyboard: [
            ["‚úÖ 50 USDT Tron (TRC20) ‚úÖ"],
            ["‚úÖ 100 USDT Tron (TRC20) ‚úÖ"],
            ["‚úÖ 250 USDT Tron (TRC20) ‚úÖ"],
            ["‚úÖ 500 USDT Tron (TRC20) ‚úÖ"],
            ["‚úÖ 1000 USDT Tron (TRC20) ‚úÖ"],
            ["–û—Ç–º–µ–Ω–∞"]
        ]
    }
}

nets_keyboard = {
    reply_markup: {
        resize_keyboard: true,
        one_time_keyboard: true,
        keyboard: [
            ["BNB —Å–µ—Ç—å - Smart Chain (BEP20)"],
            ["USDT —Å–µ—Ç—å - Tron (TRC20)"],
            ["ETH —Å–µ—Ç—å - (ERC20)"],
            ["BTC —Å–µ—Ç—å - Bitcoin"],
            ["–û—Ç–º–µ–Ω–∞"]
        ]
    }
}

amount_keyboard = {
    reply_markup: {
        resize_keyboard: true,
        one_time_keyboard: true,
        keyboard: [
            ["üìå 50 USDT üìå"],
            ["üìå 100 USDT üìå"],
            ["üìå 250 USDT üìå"],
            ["üìå 500 USDT üìå"],
            ["üìå 1000 USDT üìå"],
            ["–û—Ç–º–µ–Ω–∞"]
        ]
    }
}


bot_works_3_yrs = `‚úÖ–ù–ê–® –ë–û–¢ –†–ê–ë–û–¢–ê–ï–¢ –£–ñ–ï –ë–û–õ–ï–ï 3-—ë—Ö –õ–ï–¢ ‚úÖ
üìå–ú—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞ —Å—á–µ—Ç –≤–∞—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π üìå
‚ùóÔ∏è–ö–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –ø–æ–ª—É—á–∞–µ—Ç 5% —Å —Å—É–º–º—ã –µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ ( –æ–¥–∏–Ω —Ä–∞–∑ –≤ 24 —á–∞—Å–∞ ) ‚ùóÔ∏è
üíª –ú—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–Ω—Å—ã –≤ –ë—Ä–æ–∫–µ—Ä—Å–∫—É—é –∫–æ–º–ø–∞–Ω–∏—é FREEDOM 24 üíª`

adresses_text = `BNB –ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—èüìå
0x301cb894142810bed99c3251209b
8bd9a8b2f
–°–µ—Ç—å
BNB Smart Chain (BEP20)

USDT –ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—èüìå
TPWuXaPy4xZwPbrQuazodp08zKX81
4Y4F
7
–°–µ—Ç—å
Tron (TRC20)

ETH –ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—èüìå
0x301cb894142810bed99c3251209b
8bd9a8b2f
–°–µ—Ç—å
Ethereum (ERC20)

–í–¢–° –ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—èüìå
1DNN8efMUXj4KJgi5xnRXP57yAPex3D
TiB
–°–µ—Ç—å
Bitcoin`


send_check_text = `‚ÄºÔ∏è –í–∞–∂–Ω–æ ‚ÄºÔ∏è
–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –æ –ø–µ—Ä–µ–≤–æ–¥–µ –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É 

               üëá
@investadmincrypto`


write_to_withdraw = `–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É , –Ω–∞ –∫–∞–∫–æ–π –ê–¥—Ä–µ—Å –∏ —Å–µ—Ç—å –∫–æ—à–µ–ª—å–∫–∞ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å–≤–æ–π –¥–µ–ø–æ–∑–∏—Ç 

üëá
@investadmincrypto`


bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const username = msg.chat.username;
    const text = msg.text;

    if (text.includes('/start')) {
        new_user(chatId);

        bot.sendMessage(chatId, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ cryptoinvestbot.', main_menu_keyboard);
        return;
    }

    get_user(chatId).then(results => {
        if (!results) {
            new_user(chatId);
        }
        if (text == "–û—Ç–º–µ–Ω–∞") {
            set_stage(chatId, "main_menu");
    
            bot.sendMessage(chatId, '–û—Ç–º–µ–Ω–µ–Ω–æ.', main_menu_keyboard);
        } else if (text == 'üìù –ö–æ–Ω—Ç—Ä–∞–∫—Ç –∏ –£—Å–ª–æ–≤–∏—è üìù') {
            bot.sendMessage(chatId, bot_works_3_yrs, cancel_keyboard);
        } else if (text == 'üÜò –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ( –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ) üÜò') {
            bot.sendMessage(chatId, '@investadmincrypto', main_menu_keyboard);
        } else if (text == 'üìà FREEDOM 24 üìâ') {
            set_stage(chatId, "freedom_info");
            bot.sendMessage(chatId, '‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è', {
                reply_markup: {
                    resize_keyboard: true,
                    one_time_keyboard: true,
                    keyboard: [
                        ["üìé –ü–æ–ª—É—á–∏—Ç—å –°—Å—ã–ª–∫—É üìé"],
                        ["üñáÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –û—Ç–∑—ã–≤—ã üñáÔ∏è"],
                        ["–û—Ç–º–µ–Ω–∞"]
                    ]
                }
            });
        } else if (results.position == 'freedom_info') {
            if (text == 'üìé –ü–æ–ª—É—á–∏—Ç—å –°—Å—ã–ª–∫—É üìé') {
                bot.sendMessage(chatId, freedom_link, main_menu_keyboard);
                set_stage(chatId, "main_menu");
            } else if (text == 'üñáÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –û—Ç–∑—ã–≤—ã üñáÔ∏è') {
                bot.sendMessage(chatId, freedom_link, main_menu_keyboard);
                set_stage(chatId, "main_menu");
            }
        } else if (text == 'ü•á –ú–û–ô –ü–†–û–§–ò–õ–¨ ü•á') {
            set_stage(chatId, "profile");
            bot.sendMessage(chatId, '‚úèÔ∏è', {
                reply_markup: {
                    resize_keyboard: true,
                    one_time_keyboard: true,
                    keyboard: [
                        ["‚öñÔ∏è –ú–û–ô –ë–ê–õ–ê–ù–° ‚öñÔ∏è"],
                        ["ü™´ –ú–û–Ø –ü–†–ò–ë–´–õ–¨ üîã"],
                        ["–û—Ç–º–µ–Ω–∞"]
                    ]
                }
            });
        } else if (results.position == 'profile') {
            if (text == '‚öñÔ∏è –ú–û–ô –ë–ê–õ–ê–ù–° ‚öñÔ∏è') {
                set_stage(chatId, "main_menu");
                bot.sendMessage(chatId, `–í–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${results.balance} USDT`, main_menu_keyboard);
            } else if (text == 'ü™´ –ú–û–Ø –ü–†–ò–ë–´–õ–¨ üîã') {
                set_stage(chatId, "main_menu");
                bot.sendMessage(chatId, `–í–∞—à–∞ –ø—Ä–∏–±—ã–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ö–∑ —Å–∫–æ–ª—å–∫–æ USDT`, main_menu_keyboard);
            }
        } else if (text == '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ë–∞–ª–∞–Ω—Å') {
            set_stage(chatId, "fill_up");
            bot.sendMessage(chatId, `–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –ë–ê–õ–ê–ù–° ?`, fill_up_keyboard);
        } else if (results.position == 'fill_up') {
            // TO DO: SAVE CHOISE HERE
            orders[username] = {'ammount': text};
            set_stage(chatId, "fill_up_nets");
            bot.sendMessage(chatId, `–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∫–æ—Ç–æ—Ä—ã–π –¥–ª—è –≤–∞—Å –±–æ–ª–µ–µ –£–î–û–ë–ù–´–ô :`, nets_keyboard);
        } else if (results.position == 'fill_up_nets') {
            orders[username]['net'] = text;
            bot.sendMessage(admin_id, `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏\n@${username}\n${orders[username]['ammount']}\n${orders[username]['net']}`);

            set_stage(chatId, "main_menu");
            bot.sendMessage(chatId, adresses_text).then(() => {     // IF MESSAGE WITH CHECKS SENDS BEFORE I NEED
                bot.sendMessage(chatId, send_check_text, main_menu_keyboard);
            });
        } else if (text == '–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞') {
            set_stage(chatId, "withdraw");
            bot.sendMessage(chatId, `–í—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞`, nets_keyboard);
        } else if (results.position == 'withdraw') {
            // TO DO: SAVE CHOISE HERE
            set_stage(chatId, "withdraw_amount");
            bot.sendMessage(chatId, `–ö–∞–∫—É—é —Å—É–º–º—É –≤—ã –∂–µ–ª–∞–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ —Å–≤–æ–π –ö–æ—à–µ–ª–µ–∫ ?`, amount_keyboard);
        } else if (results.position == 'withdraw_amount') {
            set_stage(chatId, "main_menu");
            bot.sendMessage(chatId, write_to_withdraw, main_menu_keyboard);
        }
    });



    // bot.sendMessage(chatId, text);
});
